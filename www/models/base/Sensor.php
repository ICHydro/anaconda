<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "sensor".
 *
 * @property integer $id
 * @property string $name
 * @property integer $catchmentid
 * @property double $latitude
 * @property double $longitude
 * @property string $sensortype
 * @property string $units
 * @property double $height
 * @property double $width
 * @property double $angle
 * @property string $property
 * @property string $admin_email
 *
 * @property \app\models\Calibration[] $calibrations
 * @property \app\models\File[] $files
 * @property \app\models\Catchment $catchment
 * @property string $aliasModel
 */
abstract class Sensor extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'sensor';
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('sensor', 'Sensors');
        }else{
            return Yii::t('sensor', 'Sensor');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['catchmentid'], 'required'],
            [['catchmentid'], 'integer'],
            [['latitude', 'longitude', 'height', 'width', 'angle'], 'number'],
            [['name', 'sensortype', 'property', 'admin_email'], 'string', 'max' => 255],
            [['units'], 'string', 'max' => 4],
            [['catchmentid'], 'exist', 'skipOnError' => true, 'targetClass' => Catchment::className(), 'targetAttribute' => ['catchmentid' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('sensor', 'ID'),
            'name' => Yii::t('sensor', 'Name'),
            'catchmentid' => Yii::t('sensor', 'Catchmentid'),
            'latitude' => Yii::t('sensor', 'Latitude'),
            'longitude' => Yii::t('sensor', 'Longitude'),
            'sensortype' => Yii::t('sensor', 'Sensortype'),
            'units' => Yii::t('sensor', 'Units'),
            'height' => Yii::t('sensor', 'Height'),
            'width' => Yii::t('sensor', 'Width'),
            'angle' => Yii::t('sensor', 'Angle'),
            'property' => Yii::t('sensor', 'Property'),
            'admin_email' => Yii::t('sensor', 'Admin Email'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(
            parent::attributeHints(),
            [
            'id' => Yii::t('sensor', 'ID'),
            'name' => Yii::t('sensor', 'Name'),
            'catchmentid' => Yii::t('sensor', 'Catchmentid'),
            'latitude' => Yii::t('sensor', 'Latitude'),
            'longitude' => Yii::t('sensor', 'Longitude'),
            'sensortype' => Yii::t('sensor', 'Sensortype'),
            'units' => Yii::t('sensor', 'Units'),
            'height' => Yii::t('sensor', 'Height'),
            'width' => Yii::t('sensor', 'Width'),
            'angle' => Yii::t('sensor', 'Angle'),
            'property' => Yii::t('sensor', 'Property'),
            'admin_email' => Yii::t('sensor', 'Admin Email'),
            ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCalibrations()
    {
        return $this->hasMany(\app\models\Calibration::className(), ['sensorid' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFiles()
    {
        return $this->hasMany(\app\models\File::className(), ['sensorid' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatchment()
    {
        return $this->hasOne(\app\models\Catchment::className(), ['id' => 'catchmentid']);
    }




}
