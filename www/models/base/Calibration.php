<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "calibration".
 *
 * @property integer $id
 * @property string $datetime
 * @property double $height
 * @property string $measure
 * @property integer $sensorid
 * @property string $yourname
 * @property string $youremail
 *
 * @property \app\models\Sensor $sensor
 * @property string $aliasModel
 */
abstract class Calibration extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const MEASURE_MM = 'mm';
    const MEASURE_CM = 'cm';
    const MEASURE_M = 'm';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'calibration';
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('calibration', 'Calibrations');
        }else{
            return Yii::t('calibration', 'Calibration');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['datetime'], 'safe'],
            [['height'], 'number'],
            [['measure'], 'string'],
            [['sensorid'], 'required'],
            [['sensorid'], 'integer'],
            [['yourname', 'youremail'], 'string', 'max' => 255],
            [['sensorid'], 'exist', 'skipOnError' => true, 'targetClass' => Sensor::className(), 'targetAttribute' => ['sensorid' => 'id']],
            ['measure', 'in', 'range' => [
                    self::MEASURE_MM,
                    self::MEASURE_CM,
                    self::MEASURE_M,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('calibration', 'ID'),
            'datetime' => Yii::t('calibration', 'Datetime'),
            'height' => Yii::t('calibration', 'Height'),
            'measure' => Yii::t('calibration', 'Measure'),
            'sensorid' => Yii::t('calibration', 'Sensorid'),
            'yourname' => Yii::t('calibration', 'Yourname'),
            'youremail' => Yii::t('calibration', 'Youremail'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(
            parent::attributeHints(),
            [
            'id' => Yii::t('calibration', 'ID'),
            'datetime' => Yii::t('calibration', 'Datetime'),
            'height' => Yii::t('calibration', 'Height'),
            'measure' => Yii::t('calibration', 'Measure'),
            'sensorid' => Yii::t('calibration', 'Sensorid'),
            'yourname' => Yii::t('calibration', 'Yourname'),
            'youremail' => Yii::t('calibration', 'Youremail'),
            ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSensor()
    {
        return $this->hasOne(\app\models\Sensor::className(), ['id' => 'sensorid']);
    }




    /**
     * get column measure enum value label
     * @param string $value
     * @return string
     */
    public static function getMeasureValueLabel($value){
        $labels = self::optsMeasure();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column measure ENUM value labels
     * @return array
     */
    public static function optsMeasure()
    {
        return [
            self::MEASURE_MM => Yii::t('calibration', self::MEASURE_MM),
            self::MEASURE_CM => Yii::t('calibration', self::MEASURE_CM),
            self::MEASURE_M => Yii::t('calibration', self::MEASURE_M),
        ];
    }

}
